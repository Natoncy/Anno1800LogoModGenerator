using Anno1800LogoModGenerator;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Microsoft.JSInterop;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Formats.Png;
using SixLabors.ImageSharp.PixelFormats;
using SixLabors.ImageSharp.Processing;
using System.IO.Compression;
using System.Text;
using System.IO;
using System.IO.Compression;
using System.Text;



namespace Anno1800LogoModGenerator.Pages
{
    public class Logo
    {
        public byte[] Data { get; set; }
        public byte[] DataSmall { get; set; }

        public string Base64
        {
            get
            {
                string base64Image = Convert.ToBase64String(Data);
                string imageDataURL = $"data:image/jpeg;base64,{base64Image}";
                return imageDataURL;
            }
        }
    }

    public partial class Index : ComponentBase
    {
        [Inject]
        public IJSRuntime JS { get; set; }


        public const int LargeSize = 512;
        public const int SmallSize = 128;

        public int StartingGuid { get; set; } = 2001000000; // Starting personal use GUID range https://github.com/anno-mods/GuidRanges
        public List<Logo> Logos { get; set; } = new List<Logo>();



        protected override void OnInitialized()
        {
        }

        private async Task UploadFile(InputFileChangeEventArgs e)
        {
            foreach (var file in e.GetMultipleFiles(int.MaxValue))
            {
                MemoryStream ms = new MemoryStream();
                await file.OpenReadStream(long.MaxValue).CopyToAsync(ms);
                var originalBytes = ms.ToArray();

                using var image = Image.Load<Rgba32>(originalBytes);

                image.Mutate(x => x.Resize(LargeSize, LargeSize));

                for (var i = 0; i < image.Width; i++)
                {
                    for (var j = 0; j < image.Height; j++)
                    {
                        image[i, j] = new Rgba32(byte.MaxValue, byte.MaxValue, byte.MaxValue, image[i, j].A);
                    }
                }

                var bytes = image.SaveImageToByteArray();

                image.Mutate(x => x.Resize(SmallSize, SmallSize));

                var bytesSmall = image.SaveImageToByteArray();

                Logos.Add(new Logo()
                {
                    Data = bytes,
                    DataSmall = bytesSmall
                });
            }
        }

        public async Task DownloadModAsync()
        {
            byte[] zipBytes = CreateModZip();
            string base64 = Convert.ToBase64String(zipBytes);

            await JS.InvokeVoidAsync("window.downloadFileFromBase64", "logo_mod.zip", base64);
        }

        public byte[] CreateModZip()
        {
            using var memoryStream = new MemoryStream();

            using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, leaveOpen: true))
            {
                // Add modinfo.json
                var modInfoEntry = archive.CreateEntry("modinfo.json");
                using (var writer = new StreamWriter(modInfoEntry.Open(), Encoding.UTF8))
                {
                    string json = """
                {
                  "Version":"1.0",
                  "ModID":"AutoGenerated_Personal_Logos",
                  "IncompatibleIds":null,
                  "ModDependencies":null,
                  "Category":{
                    "Chinese":null,
                    "English":"Personal",
                    "French":null,
                    "German":null,
                    "Italian":null,
                    "Japanese":null,
                    "Korean":null,
                    "Polish":null,
                    "Russian":null,
                    "Spanish":null,
                    "Taiwanese":null,
                    "Czech":null
                  },
                  "ModName":{
                    "Chinese":null,
                    "English":"Personal Logos",
                    "French":null,
                    "German":null,
                    "Italian":null,
                    "Japanese":null,
                    "Korean":null,
                    "Polish":null,
                    "Russian":null,
                    "Spanish":null,
                    "Taiwanese":null,
                    "Czech":null
                  },
                  "KnownIssues":null,
                  "DLCDependencies":null,
                  "CreatorName":"Anno 1800 Logo Mod Generator",
                  "CreatorContact":null,
                  "Description":{
                    "Chinese":null,
                    "English":"Personal player logos. Mod generated by a tool.",
                    "French":null,
                    "German":null,
                    "Italian":null,
                    "Japanese":null,
                    "Korean":null,
                    "Polish":null,
                    "Russian":null,
                    "Spanish":null,
                    "Taiwanese":null,
                    "Czech":null
                  }
                }
                """;
                    writer.Write(json);
                }

                var assetsText = @$"
<ModOps>
  <ModOp GUID='92' Type=""addNextSibling""> 	
  	";
                for (int i = 0; i < Logos.Count; i++)
                {
                    var guid = StartingGuid + i;
                    assetsText += @$"
  	<Asset>
	      <Template>PlayerLogo</Template>
	      <Values>
	          <Standard>
	              <GUID>{guid}</GUID>
	              <Name>Logo_{guid}</Name>
	              <IconFilename>data/modgraphics/ui/logos/large/Logo_{guid}.png</IconFilename>
	          </Standard>
	          <PlayerLogo>
	              <DefaultLogo>data/modgraphics/ui/logos/large/Logo_{guid}.png</DefaultLogo>
	              <MiniLogo>data/modgraphics/ui/logos/small/Logo_{guid}.png</MiniLogo>
	          </PlayerLogo>
	          <Locked>
	              <DefaultLockedState>0</DefaultLockedState>
	          </Locked>
	      </Values>
    </Asset>
    ";
                }

                assetsText += @$"
  </ModOp>
  <ModOp Type=""addPrevSibling"" GUID='500769' Path=""/Values/CreateGameScene/Logos/Item[Logo='501722']"">
  	";
                for (int i = 0; i < Logos.Count; i++)
                {
                    assetsText += @$"
      <Item>
          <Logo>{StartingGuid + i}</Logo>
      </Item>
          ";
                }
                assetsText += @$"
  </ModOp>
</ModOps>



";

                var entry = archive.CreateEntry("data/config/export/main/asset/assets.xml");
                using (var assetsWriter = new StreamWriter(entry.Open()))
                {
                    assetsWriter.Write(assetsText);
                }

                for (int i = 0; i < Logos.Count; i++)
                {
                    var guid = StartingGuid + i;
                    AddImageFile(archive, $"data/modgraphics/ui/logos/large/Logo_{guid}.png", Logos[i].Data);
                    AddImageFile(archive, $"data/modgraphics/ui/logos/small/Logo_{guid}.png", Logos[i].DataSmall);
                }
            }

            memoryStream.Position = 0;
            return memoryStream.ToArray();
        }

        private static void AddImageFile(ZipArchive archive, string path, byte[] imageBytes)
        {
            var entry = archive.CreateEntry(path);
            using var entryStream = entry.Open();
            entryStream.Write(imageBytes, 0, imageBytes.Length);
        }
    }

    public static class ImageExtensions
    {
        public static byte[] SaveImageToByteArray(this Image<Rgba32> image)
        {
            using (var ms = new MemoryStream())
            {
                image.Save(ms, new PngEncoder()); // You can use any encoder you want
                return ms.ToArray();
            }
        }

    }
}
